format PE console
entry start
include 'win32ax.inc'

section '.rdata' data readable writeable
  fmt  db   '%s', 13, 10, 0
  ext  db   'press key...%c',0
  src  db   'Re 3 5 v 7 rsE',0
  begin db  'Write sentence:', 13, 10, 0
  nums db '123456789'

  outputstr db  '', 13, 10, 0
  res db '', 0

  dst  db   256 dup(0)
  dst2  db   256 dup(0)
  char db   0
  flag db 0
  inputnumber dd 0
        
section '.idata' data readable import
  library kernel32, 'kernel32.dll', msvcrt,   'msvcrt.dll'
        
  import kernel32, ExitProcess, 'ExitProcess'
  import msvcrt, printf, 'printf', scanf, 'scanf'

section '.text' code executable

str_reverse: 
  mov esi, [esp + 8]
  mov edi, [esp + 4]
  xor ecx, ecx
@read:
  lodsb
  cmp al, 0
  je  @write
  push ax
  inc ecx
jmp @read
@write:  
  pop ax
  stosb
loop @write
  ret 8

macro numtostr num,str
{
mov eax,[num]
xor ecx,ecx
mov ebx,10
numtostrloop1:
xor edx,edx
div ebx
add edx, '0'
push edx
inc ecx
test eax,eax
jnz numtostrloop1
mov edi,str
numtostrloop2:
pop edx
mov byte[edi],dl
inc edi
dec ecx
test ecx,ecx
jnz numtostrloop2
}

start:
  ; âûâîä ñòðîêè
  invoke printf, fmt, src
  ; ïåðâûé ðåâåðñ
  push   src
  push   dst
  call   str_reverse

  invoke printf, fmt, dst 

 ; ðàçìåð ñòðîêè
mov ecx, src
 xor eax, eax
 dec eax
 notzero:
 inc eax
 cmp byte[ecx+eax], 0
 jne notzero

;mov edi, src
;invoke printf, fmt, edi

mov eax,eax
sub eax,[inputnumber]
mov [inputnumber],eax
;numtostr inputnumber,outputstr
;invoke printf, fmt, outputstr
;mov edi, src
mov ebx, 0
.repeat
  add ebx, 1  ; íà 1 èòåðàöèþ ìåíüøå ñòàë
  mov esi, nums
  dec esi
  mov ecx, 10

  loop1:
     inc esi
     cmp byte[esi], "3"
     loopne loop1
     test ecx, ecx
     jz notfound
     invoke printf, fmt, "-"
     jmp endfind
   notfound:
     invoke printf, fmt, 'a'
          jmp endfind
   endfind:

.until ebx < inputnumber

; ïîñëåäíèé ðåâåðñ
   push   dst
 push   dst2
  call   str_reverse

  invoke printf, fmt, dst2

  invoke scanf, ext, char
  invoke ExitProcess, 0
